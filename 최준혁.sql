create database `rrs_db`;

use `rrs_db`;

CREATE TABLE `USERS` (
	`ID` int unsigned PRIMARY KEY AUTO_INCREMENT COMMENT '유저ID 기본키',
	`USER_NAME`	VARCHAR(50) NOT NULL COMMENT '유저 이름',
	`USER_ID`VARCHAR(50) NOT NULL COMMENT'유저 로그인 아이디',
	`USER_PASSWORD` VARCHAR(50) NOT NULL COMMENT '유저 로그인 비밀번호',
	`USER_NICK_NAME` VARCHAR(50) UNIQUE NOT NULL COMMENT '유저 닉네임(중복안됨)',
	`USER_PHONE` CHAR(11) NOT NULL COMMENT '휴대폰 번호(중복안됨)',
	`USER_ADDRESS` VARCHAR(255) NOT NULL COMMENT '주소',
	`USER_ADDRESS_DETAIL` VARCHAR(255) NOT NULL COMMENT '주소 상세',
	`USER_EMAIL` VARCHAR(255) UNIQUE NOT NULL COMMENT '유저 이메일 (중복안됨)',
	`USER_PROFILE_IMAGE_URL` VARCHAR(255) COMMENT '프로필 사진 주소',
	`USER_IS_DELETED` CHAR(1) DEFAULT 1 NOT NULL COMMENT '삭제여부 O: 삭제, 1: 사용',
	`USER_CREATE_AT` DATETIME NOT NULL COMMENT '생성 시간'
); 

-- INSERT INTO `USERS` (
--     `USER_NAME`, 
--     `USER_ID`, 
--     `USER_PASSWORD`, 
--     `USER_NICK_NAME`, 
--     `USER_PHONE`, 
--     `USER_ADDRESS`, 
--     `USER_ADDRESS_DETAIL`, 
--     `USER_EMAIL`, 
--     `USER_PROFILE_IMAGE_URL`, 
--     `USER_IS_DELETED`, 
--     `USER_CREATE_AT`
-- ) VALUES (
--     '홍길동2',
--     'hong123',
--     'password123',
--     '길동이2',
--     '01012345678',
--     '서울시 강남구',
--     '역삼동 123-45',
--     'hong2@example.com',
--     'https://example.com/profile.jpg',
--     '2',
--     NOW()
-- );

CREATE TABLE `COMMUNITIES` (
   `COMMUNITY_ID` int unsigned PRIMARY KEY AUTO_INCREMENT COMMENT '커뮤니티ID 기본키',
   `ID` int unsigned NOT NULL COMMENT '유저ID 기본키',
   `COMMUNITY_TITLE` VARCHAR(255) NOT NULL COMMENT '커뮤니티 제목',
   `COMMUNITY_LIKE_COUNT` int unsigned NOT NULL DEFAULT 0 COMMENT '좋아요 수',
   `COMMUNITY_CREATE_AT` DATETIME NOT NULL COMMENT '생성 시간',
   `COMMUNITY_UPDATE_AT` DATETIME NULL COMMENT '수정 시간',
   `COMMUNITY_CONTENTS` TEXT NOT NULL COMMENT '내용',
   `COMMUNITY_THUMB_NAIL_IMG_URL` VARCHAR(255) NULL COMMENT '썸네일 이미지 URL',
   FOREIGN KEY (`ID`) REFERENCES `USERS` (`ID`)
);

-- INSERT INTO `COMMUNITIES` (
--     `ID`, 
--     `COMMUNITY_TITLE`, 
--     `COMMUNITY_LIKE_COUNT`, 
--     `COMMUNITY_CREATE_AT`, 
--     `COMMUNITY_UPDATE_AT`, 
--     `COMMUNITY_CONTENTS`, 
--     `COMMUNITY_THUMB_NAIL_IMG_URL`
-- ) VALUES (
--     4,
--     '두 번째 커뮤니티 글',
--     14,
--     NOW(),
--     NOW(),
--     '이것은 두 번째 커뮤니티 게시물입니다.',
--     'https://example.com/thumbnail.jpg'
-- );

CREATE TABLE `COMMUNITY_ATTACHMENTS` (
   `COMMUNITY_ATTACHMENT_ID` int unsigned PRIMARY KEY AUTO_INCREMENT COMMENT '커뮤니티 첨부파일ID 기본키',
   `COMMUNITY_ID` int unsigned NOT NULL COMMENT '커뮤니티ID 기본키',
   `COMMUNITY_ATTACHMENT_IMAGE_URL` VARCHAR(255) NULL COMMENT '첨부 이미지 URL',
   `COMMUNITY_ATTACHMENT_CREATE_AT` DATETIME NOT NULL COMMENT '생성 시간',
    FOREIGN KEY (`COMMUNITY_ID`) REFERENCES `COMMUNITIES` (`COMMUNITY_ID`)
);

-- INSERT INTO `COMMUNITY_ATTACHMENTS` (
--     `COMMUNITY_ID`, 
--     `COMMUNITY_ATTACHMENT_IMAGE_URL`, 
--     `COMMUNITY_ATTACHMENT_CREATE_AT`
-- ) VALUES
-- (1, 'https://example.com/image1.jpg', NOW()),
-- (8, 'https://example.com/image2.jpg', NOW()),
-- (9, NULL, NOW());

CREATE TABLE `COMMUNITY_COMMENTS` (   
   `COMMUNITY_COMMENTS_ID` int unsigned PRIMARY KEY AUTO_INCREMENT COMMENT '커뮤니티 댓글ID 기본키',
   `COMMUNITY_ID` int unsigned NOT NULL COMMENT '커뮤니티ID 기본키',
   `ID` int unsigned NOT NULL COMMENT '유저ID 기본키',
   `COMMUNITY_COMMENTS_PARENT_REPLY` CHAR(1) NOT NULL COMMENT '원댓글 여부 0: 원댓글, 1: 대댓글',
   `COMMUNITY_COMMENTS_CONTENTS` VARCHAR(255) NOT NULL COMMENT '댓글 내용',
    FOREIGN KEY (`COMMUNITY_ID`) REFERENCES `COMMUNITIES` (`COMMUNITY_ID`),
	FOREIGN KEY (`ID`) REFERENCES `USERS` (`ID`) 
);

-- INSERT INTO `COMMUNITY_COMMENTS` (
--     `COMMUNITY_ID`, 
--     `ID`, 
--     `COMMUNITY_COMMENTS_PARENT_REPLY`, 
--     `COMMUNITY_COMMENTS_CONTENTS`
-- ) VALUES (
--     1, 1, '0', '두 번째 댓글입니다.');

# 사용자 전체 조회
SELECT * FROM `USERS`;

# 댓글 전체 조회
SELECT * FROM `COMMUNITY_COMMENTS`;

# 게시글 전체 조회
SELECT * FROM `COMMUNITIES`;

# 첨부파일 전체 조회
SELECT * FROM `COMMUNITY_ATTACHMENTS`;

# 게시글 단건 조회
SELECT 
    c.COMMUNITY_ID,
    c.ID AS USER_ID,
    u.USER_NAME,
    u.USER_NICK_NAME,
    c.COMMUNITY_TITLE,
    c.COMMUNITY_LIKE_COUNT,
    c.COMMUNITY_CREATE_AT,
    c.COMMUNITY_UPDATE_AT,
    c.COMMUNITY_CONTENTS,
    c.COMMUNITY_THUMB_NAIL_IMG_URL,
    ca.COMMUNITY_ATTACHMENT_IMAGE_URL AS ATTACHMENT_IMAGE_URL,
    com.COMMUNITY_COMMENTS_ID AS COMMENT_ID,
    com.COMMUNITY_COMMENTS_CONTENTS AS COMMENT_CONTENTS,
    com.COMMUNITY_COMMENTS_PARENT_REPLY AS COMMENT_PARENT_REPLY,
    com.ID AS COMMENT_USER_ID
FROM 
    COMMUNITIES c
JOIN 
    USERS u ON c.ID = u.ID
LEFT JOIN 
    COMMUNITY_ATTACHMENTS ca ON c.COMMUNITY_ID = ca.COMMUNITY_ID
LEFT JOIN 
    COMMUNITY_COMMENTS com ON c.COMMUNITY_ID = com.COMMUNITY_ID
JOIN 
    USERS com_user ON com.ID = com_user.ID
WHERE 
    c.COMMUNITY_ID = 1;

# 게시글 최신순 조회
SELECT 
    C.`COMMUNITY_ID`, 
    U.`USER_NAME`, 
    C.`COMMUNITY_TITLE`, 
    C.`COMMUNITY_LIKE_COUNT`, 
    C.`COMMUNITY_CREATE_AT`, 
    C.`COMMUNITY_CONTENTS`, 
    C.`COMMUNITY_THUMB_NAIL_IMG_URL`
FROM 
    `COMMUNITIES` C
JOIN 
    `USERS` U ON C.`ID` = U.`ID`
ORDER BY 
    C.`COMMUNITY_CREATE_AT` DESC;
    
# 좋아요 수가 많은 순
SELECT 
    C.`COMMUNITY_ID`, 
    U.`USER_NAME`, 
    C.`COMMUNITY_TITLE`, 
    C.`COMMUNITY_LIKE_COUNT`, 
    C.`COMMUNITY_CREATE_AT`, 
    C.`COMMUNITY_CONTENTS`, 
    C.`COMMUNITY_THUMB_NAIL_IMG_URL`
FROM 
    `COMMUNITIES` C
JOIN 
    `USERS` U ON C.`ID` = U.`ID`
ORDER BY 
    C.`COMMUNITY_LIKE_COUNT` DESC;
    
#오래된 순
SELECT 
    C.`COMMUNITY_ID`, 
    U.`USER_NAME`, 
    C.`COMMUNITY_TITLE`, 
    C.`COMMUNITY_LIKE_COUNT`, 
    C.`COMMUNITY_CREATE_AT`, 
    C.`COMMUNITY_CONTENTS`, 
    C.`COMMUNITY_THUMB_NAIL_IMG_URL`
FROM 
    `COMMUNITIES` C
JOIN 
    `USERS` U ON C.`ID` = U.`ID`
ORDER BY 
    C.`COMMUNITY_CREATE_AT` ASC;
    
#댓글 수가 많은 순
SELECT 
    C.`COMMUNITY_ID`, 
    U.`USER_NAME`, 
    C.`COMMUNITY_TITLE`, 
    C.`COMMUNITY_LIKE_COUNT`, 
    C.`COMMUNITY_CREATE_AT`, 
    C.`COMMUNITY_CONTENTS`, 
    C.`COMMUNITY_THUMB_NAIL_IMG_URL`, 
    COUNT(COM.`COMMUNITY_COMMENTS_ID`) AS `COMMENT_COUNT`
FROM 
    `COMMUNITIES` C
JOIN 
    `USERS` U ON C.`ID` = U.`ID`
LEFT JOIN 
    `COMMUNITY_COMMENTS` COM ON C.`COMMUNITY_ID` = COM.`COMMUNITY_ID`
GROUP BY 
    C.`COMMUNITY_ID`
ORDER BY 
    `COMMENT_COUNT` DESC;

#아이디와 비밀번호 찾기
SELECT 
    `USER_ID`
FROM 
    `USERS`
WHERE 
    `USER_EMAIL` = 'hong@example.com' 
    AND `USER_NAME` = '홍길동';
    